syntax = "proto3";

package proto.rpc;

import "github.com/ethresearch/sharding-p2p-poc/pb/message/message.proto";

service Poc {
  rpc AddPeer (RPCAddPeerRequest) returns (RPCPlainResponse) {}
  rpc SubscribeShard(RPCSubscribeShardRequest) returns (RPCPlainResponse) {}
  rpc UnsubscribeShard(RPCUnsubscribeShardRequest) returns (RPCPlainResponse) {}
  rpc GetSubscribedShard(RPCGetSubscribedShardRequest) returns (RPCGetSubscribedShardResponse) {}
  rpc BroadcastCollation(RPCBroadcastCollationRequest) returns (RPCPlainResponse) {}
  rpc SendCollation(RPCSendCollationRequest) returns (RPCPlainResponse) {}
  rpc StopServer(RPCStopServerRequest) returns (RPCPlainResponse) {}
  rpc GetConnection(RPCGetConnectionRequest) returns (RPCGetConnectionResponse) {}
  rpc GetPeer(RPCGetPeerRequest) returns (RPCGetPeerResponse) {}
  rpc SyncShardPeer(RPCSyncShardPeerRequest) returns (RPCSyncShardPeerResponse) {}
  rpc SyncCollation(RPCSyncCollationRequest) returns (RPCSyncCollationResponse) {}
}

message RPCAddPeerRequest {
  string ip = 1;
  int64 port = 2;
  int64 seed = 3;
}
message RPCSubscribeShardRequest {
  repeated int64 shardIDs = 1;
}
message RPCUnsubscribeShardRequest {
  repeated int64 shardIDs = 1;
}
message RPCGetSubscribedShardRequest {
}
message RPCGetSubscribedShardResponse {
  Response response = 1;
  repeated int64 shardIDs = 2;
}
message RPCBroadcastCollationRequest {
  int64 shardID = 1;
  int64 number = 2;
  int64 size = 3;
  int64 period = 4;
}
message RPCSendCollationRequest {
  proto.message.Collation collation = 1;
}
message RPCStopServerRequest {
}

message RPCGetConnectionRequest {
}
message RPCGetConnectionResponse {
  Response response = 1;
  repeated string connections = 2;
}

message RPCGetPeerRequest {
  string topic = 1;
}
message RPCGetPeerResponse {
  Response response = 1;
  repeated string peerIDs = 2;
}

message RPCSyncShardPeerRequest {
  string peerID = 1;
  repeated int64 sharIDs = 2;
}
message RPCSyncShardPeerResponse {
  Response response = 1;
  map<int64, proto.message.Peers> shardPeers = 2;
}

message RPCSyncCollationRequest {
  string peerID = 1;
  int64 shardID = 2;
  int64 period = 3;
  string collationHash = 4;
}
message RPCSyncCollationResponse {
  Response response = 1;
  proto.message.Collation collation = 2;
}

// Response
message Response {
  Status status = 1;
  string message = 2;

  enum Status {
      SUCCESS = 0;
      FAILURE = 1;
  }
}
message RPCPlainResponse {
  Response response = 1;
}
